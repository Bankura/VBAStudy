VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "Main"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Option Explicit

'*/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
'*
'* [機能名] メイン機能
'* [詳  細] 本PostgreSQL Clientのメインとなる処理を実装する。
'*
'* @author Bankura
'* Copyright (c) 2019 Bankura
'*/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/

'******************************************************************************
'* 定数定義
'******************************************************************************
Private Const START_ROW_NUM As Long = 8
Private Const PKEY_COL_NUM As Long = 2
Private Const CANEXEC_COL_NUM As Long = 3
Private Const SQL_COL_NUM As Long = 4

'******************************************************************************
'* 内部変数定義
'******************************************************************************
Private mCommander As PsqlCommander

'******************************************************************************
'* [概  要] メイン処理。
'* [詳  細] 本PostgreSQL Clientのメイン処理。「実行」ボタンより呼び出される。
'*
'******************************************************************************
Sub Main()
    On Error GoTo ErrorHandler
    Dim sql As String
    Set mCommander = New PsqlCommander
    
    ' 設定情報取得
    Dim settingSh As Worksheet
    Set settingSh = ThisWorkbook.Worksheets("設定")
    mCommander.PsqlPath = settingSh.Cells(4, 4).Value
    mCommander.DbHost = settingSh.Cells(5, 4).Value
    mCommander.DbPort = settingSh.Cells(6, 4).Value
    mCommander.dbName = settingSh.Cells(7, 4).Value
    mCommander.DbUserName = settingSh.Cells(8, 4).Value
    mCommander.DbPassword = settingSh.Cells(9, 4).Value

    'ワークシート作成
    Dim ws As Worksheet
    Set ws = XlWorkSheetUtils.CopySheet("wk", "Result", , True)
    
    ' SQLの繰り返し実行処理
    Dim nrow As Long: nrow = 1
    Dim pos As Long, endRowNum As Long: endRowNum = XlWorkSheetUtils.GetFinalKeyRow(Me, PKEY_COL_NUM)
    For pos = START_ROW_NUM To endRowNum
        If Cells(pos, CANEXEC_COL_NUM).Value = "○" Then
            sql = Cells(pos, SQL_COL_NUM).Value
            
            ' SQL実行
            If Not ExecSQL(sql, nrow, ws) Then
                Exit Sub
            End If
        End If
    Next pos
    
    Exit Sub

ErrorHandler:
    MsgBox "エラーが発生：Number=" & Err.Number & " Description=" & Err.Description, vbOKOnly + vbCritical
End Sub

'******************************************************************************
'* [概  要] SQL文実行処理
'* [詳  細] ExecPsqlを呼び出してSQL文を実行し、結果をシートに出力する。
'*
'* @param sql SQL文
'* @param nrow 出力行位置
'* @param ws シートオブジェクト
'* @return 処理結果（True:継続する False：継続しない）
'******************************************************************************
Private Function ExecSQL(sql As String, ByRef nrow As Long, ws As Worksheet) As Boolean
    On Error GoTo ErrorHandler
    
    ' 開始処理
    Call Base.StartProcess
    
    ' SQL実行(psql使用)
    Dim ret: ret = mCommander.ExecPsql(sql)
    
    ' ワークシートへの結果出力
    ws.Cells(nrow, 1).Value = sql
    nrow = nrow + 1
    Dim stdOut As Variant: stdOut = ret
    Dim lRowMax As Long: lRowMax = ArrayUtils.GetLength(ret)
    Dim lColMax As Long: lColMax = ArrayUtils.GetLength(ret, 2)
    ws.Range(ws.Cells(nrow, 1), ws.Cells(nrow + lRowMax - 1, lColMax)).Value = ret
    nrow = nrow + lRowMax + 1
    
    '終了処理
    Call Base.EndProcess
    ExecSQL = True
    Exit Function
    
ErrorHandler:
    Call Base.EndProcess
    MsgBox "エラーが発生：Number=" & Err.Number & " Description=" & Err.Description, vbOKOnly + vbCritical

End Function


